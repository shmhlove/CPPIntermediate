; Listing generated by Microsoft (R) Optimizing Compiler Version 19.21.27702.2 

	TITLE	D:\WorkSpace\GitHub\CPPIntermediate\u04_study_this_call\test1.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?set@Point@@QAEXHH@Z				; Point::set
PUBLIC	??0Point@@QAE@XZ				; Point::Point
PUBLIC	_main
; Function compile flags: /Odtp
; File D:\WorkSpace\GitHub\CPPIntermediate\u04_study_this_call\test1.cpp
_TEXT	SEGMENT
_p2$ = -16						; size = 8
_p1$ = -8						; size = 8
_main	PROC

; 16   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 17   : 	Point p1;

	lea	ecx, DWORD PTR _p1$[ebp]
	call	??0Point@@QAE@XZ

; 18   : 	Point p2;

	lea	ecx, DWORD PTR _p2$[ebp]
	call	??0Point@@QAE@XZ

; 19   : 	
; 20   : 	// this call
; 21   : 	p1.set(10, 20);	// set(&p1, 10, 20)

	push	20					; 00000014H
	push	10					; 0000000aH
	lea	ecx, DWORD PTR _p1$[ebp]
	call	?set@Point@@QAEXHH@Z			; Point::set

; 22   : 					// push 20
; 23   : 					// push 10
; 24   : 					// mov ecx, &p1 rcx, &p1
; 25   : 					// call Point::set
; 26   : }

	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0Point@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Point@@QAE@XZ PROC					; Point::Point, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Point@@QAE@XZ ENDP					; Point::Point
_TEXT	ENDS
; Function compile flags: /Odtp
; File D:\WorkSpace\GitHub\CPPIntermediate\u04_study_this_call\test1.cpp
;	COMDAT ?set@Point@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
?set@Point@@QAEXHH@Z PROC				; Point::set, COMDAT
; _this$ = ecx

; 9    : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 10   : 		x = a;	// this->x = a;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _a$[ebp]
	mov	DWORD PTR [eax], ecx

; 11   : 		y = b;	// this->y = b;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _b$[ebp]
	mov	DWORD PTR [edx+4], eax

; 12   : 	}

	mov	esp, ebp
	pop	ebp
	ret	8
?set@Point@@QAEXHH@Z ENDP				; Point::set
_TEXT	ENDS
END
